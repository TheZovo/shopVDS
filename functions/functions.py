import sqlite3
import logging
import uuid
import requests
from requests.auth import HTTPBasicAuth
from config import config
from payments.currency import get_usd_exchange_rate

YOOKASSA_URL = "https://api.yookassa.ru/v3/payments"

logger = logging.getLogger(__name__)


def create_db():
    conn = sqlite3.connect("vds_shop.db")
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE,
            balance REAL DEFAULT 0,
            promo_code TEXT DEFAULT NULL
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            ip TEXT,
            login TEXT,
            password TEXT,
            cores INTEGER,
            ram INTEGER,
            ssd INTEGER,
            geo TEXT,  -- –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ geo
            price REAL
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS purchases (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER,
            ip TEXT,
            login TEXT,
            password TEXT,
            cores INTEGER,
            ram INTEGER,
            ssd INTEGER,
            geo TEXT,
            price REAL,
            purchase_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS promo_codes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT UNIQUE,
            discount REAL,
            usage_limit INTEGER
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER,
            payment_id TEXT UNIQUE,
            amount_rub REAL,
            amount_usd REAL,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS crypto_payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            invoice_id TEXT UNIQUE,
            telegram_id INTEGER,
            amount REAL,
            status TEXT DEFAULT 'pending'
        )
    ''')
    cursor.execute("PRAGMA table_info(products)")
    columns = [col[1] for col in cursor.fetchall()]
    
    if "geo" not in columns:
        cursor.execute("ALTER TABLE products ADD COLUMN geo TEXT DEFAULT 'N/A'")  # –î–æ–±–∞–≤–ª—è–µ–º geo, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    conn.commit()






def create_user(telegram_id):
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id FROM users WHERE telegram_id = ?
    ''', (telegram_id,))
    user = cursor.fetchone()

    if not user:
        cursor.execute('''
            INSERT INTO users (telegram_id, balance) VALUES (?, 0)
        ''', (telegram_id,))
        conn.commit()




def get_user(telegram_id):
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT telegram_id, balance FROM users WHERE telegram_id = ?
    ''', (telegram_id,))
    user = cursor.fetchone()


    if user:
        return {"telegram_id": user[0], "balance": user[1]}
    return None


def get_user_balance(telegram_id):
    conn = sqlite3.connect("vds_shop.db")
    cursor = conn.cursor()
    cursor.execute("SELECT balance FROM users WHERE telegram_id = ?", (telegram_id,))
    result = cursor.fetchone()
    print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {result[0]}")
    return result[0] if result else 0

def update_user_balance(telegram_id, amount):
    conn = sqlite3.connect("vds_shop.db")
    cursor = conn.cursor()
    
    try:
        with conn:
            cursor.execute("UPDATE users SET balance = balance + ? WHERE telegram_id = ?", (amount, telegram_id))
        conn.commit()
        print(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount}.")
    except sqlite3.OperationalError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
    finally:
        conn.close()





COUNTRY_FLAGS = {
    "US": "üá∫üá∏", "RU": "üá∑üá∫", "DE": "üá©üá™", "FR": "üá´üá∑",
    "GB": "üá¨üáß", "NL": "üá≥üá±", "CA": "üá®üá¶", "AU": "üá¶üá∫",
    "IT": "üáÆüáπ", "ES": "üá™üá∏", "PL": "üáµüá±", "BR": "üáßüá∑",
    "IN": "üáÆüá≥", "JP": "üáØüáµ", "CN": "üá®üá≥", "KR": "üá∞üá∑",
    "MX": "üá≤üáΩ", "AR": "üá¶üá∑", "ZA": "üáøüá¶", "NG": "üá≥üá¨",
    "EG": "üá™üá¨", "TR": "üáπüá∑", "SA": "üá∏üá¶", "AE": "üá¶üá™",
    "ID": "üáÆüá©", "TH": "üáπüá≠", "PH": "üáµüá≠", "SG": "üá∏üá¨",
    "NZ": "üá≥üáø", "FI": "üá´üáÆ", "SE": "üá∏üá™", "NO": "üá≥üá¥",
    "DK": "üá©üá∞", "CH": "üá®üá≠", "BE": "üáßüá™", "AT": "üá¶üáπ",
    "PL": "üáµüá±", "PT": "üáµüáπ", "GR": "üá¨üá∑", "CZ": "üá®üáø",
    "RO": "üá∑üá¥", "HU": "üá≠üá∫", "SK": "üá∏üá∞", "BG": "üáßüá¨",
    "UA": "üá∫üá¶", "KR": "üá∞üá∑", "MY": "üá≤üáæ", "VN": "üáªüá≥",
    "KW": "üá∞üáº", "QA": "üá∂üá¶", "OM": "üá¥üá≤", "KW": "üá∞üáº",
    "IE": "üáÆüá™", "IS": "üáÆüá∏", "LK": "üá±üá∞", "MD": "üá≤üá©"
}


def get_flag(geo):
    return COUNTRY_FLAGS.get(geo, "üè≥Ô∏è")


def get_user_purchase_count(user_id: int) -> int:
    conn = sqlite3.connect("vds_shop.db")
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM purchases WHERE telegram_id = ?", (user_id,))
    count = cursor.fetchone()[0]


    return count


def apply_discount(user_id, price):
    conn = sqlite3.connect("vds_shop.db")
    cursor = conn.cursor()
    cursor.execute("SELECT promo_code FROM users WHERE telegram_id = ?", (user_id,))
    promo_code = cursor.fetchone()
    
    if promo_code and promo_code[0]:
        cursor.execute("SELECT discount FROM promo_codes WHERE code = ?", (promo_code[0],))
        discount = cursor.fetchone()
        if discount:
            price *= (1 - discount[0] / 100)
    
    return round(price, 2)

def apply_promo_code(user_id, price):
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT promo_code FROM users WHERE telegram_id = ?", (user_id,))
    promo_code = cursor.fetchone()
    
    if promo_code and promo_code[0]:
        cursor.execute("SELECT discount, usage_limit FROM promo_codes WHERE code = ?", (promo_code[0],))
        promo = cursor.fetchone()
        if promo:
            discount, usage_limit = promo
            new_price = price - (price * discount / 100)
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            cursor.execute("UPDATE promo_codes SET usage_limit = usage_limit - 1 WHERE code = ?", (promo_code[0],))
            
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
            if usage_limit - 1 <= 0:
                cursor.execute("DELETE FROM promo_codes WHERE code = ?", (promo_code[0],))
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            cursor.execute("UPDATE users SET promo_code = NULL WHERE telegram_id = ?", (user_id,))
            
            conn.commit()
            print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code[0]}, –Ω–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price}")
            return new_price
    print(f"–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º. –¶–µ–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {price}")
    return price






def create_payment(amount_rub, user_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ YooKassa –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ë–î"""
    idempotence_key = str(uuid.uuid4())
    headers = {
        "Content-Type": "application/json",
        "Idempotence-Key": idempotence_key
    }
    
    usd_rate = get_usd_exchange_rate()
    amount_usd = round(amount_rub / usd_rate, 2)

    data = {
        "amount": {"value": f"{amount_rub:.2f}", "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": config.RETURN_URL},
        "capture": True,
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount_usd} USD –¥–ª—è @{user_id}",
        "metadata": {
            "telegram_id": str(user_id),
            "amount_usd": f"{amount_usd:.2f}"
        }
    }

    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: amount_rub={amount_rub}, user_id={user_id}, idempotence_key={idempotence_key}")

    try:
        response = requests.post(
            YOOKASSA_URL,
            json=data,
            headers=headers,
            auth=HTTPBasicAuth(config.YOOKASSA_SHOP_ID, config.YOOKASSA_SECRET_KEY)
        )
        
        logger.debug(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ YooKassa: {response.status_code}")
        logger.debug(f"–û—Ç–≤–µ—Ç YooKassa: {response.text}")

        if response.status_code not in (200, 201):
            error_msg = response.json().get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            logger.error(f"–û—à–∏–±–∫–∞ YooKassa: {error_msg}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {error_msg}")

        payment_data = response.json()
        payment_id = payment_data['id']
        
        conn = sqlite3.connect('vds_shop.db')
        cursor = conn.cursor()
        try:
            cursor.execute('''
                INSERT INTO payments (telegram_id, payment_id, amount_rub, amount_usd, status)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, payment_id, amount_rub, amount_usd, 'pending'))
            conn.commit()
            logger.debug(f"–ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        except sqlite3.IntegrityError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î (–≤–µ—Ä–æ—è—Ç–Ω–æ, –¥—É–±–ª–∏–∫–∞—Ç payment_id): {e}")
            raise
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
        finally:
            conn.close()

        return payment_data, amount_usd

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ create_payment: {e}")
        raise


def check_and_update_payment(payment_id):
    url = f"https://api.yookassa.ru/v3/payments/{payment_id}"
    try:
        response = requests.get(
            url,
            auth=(config.YOOKASSA_SHOP_ID, config.YOOKASSA_SECRET_KEY)
        )
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: —Å—Ç–∞—Ç—É—Å {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 404:
            logger.error(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ YooKassa")
            return False
            
        payment_data = response.json()
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YooKassa –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
        return False
    
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT telegram_id, amount_usd, status 
        FROM payments 
        WHERE payment_id = ?
    ''', (payment_id,))
    payment = cursor.fetchone()
    
    if not payment:
        logger.error(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
        conn.close()
        return False
    
    telegram_id, amount_usd, current_status = payment
    

    if payment_data.get("status") == "succeeded" and current_status != "succeeded":

        update_user_balance(telegram_id, amount_usd)
        
        cursor.execute('''
            UPDATE payments 
            SET status = ? 
            WHERE payment_id = ?
        ''', ('succeeded', payment_id))
        conn.commit()
        conn.close()
        logger.debug(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ succeeded, –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount_usd}")
        return True
        
    elif payment_data.get("status") != current_status:
        cursor.execute('''
            UPDATE payments 
            SET status = ? 
            WHERE payment_id = ?
        ''', (payment_data.get("status"), payment_id))
        conn.commit()
        logger.debug(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î –¥–æ {payment_data.get('status')}")
    
    conn.close()
    return False

def add_product(ip, login, password, cores, ram, ssd, geo, price):
    try:
        conn = sqlite3.connect("vds_shop.db")
        cursor = conn.cursor()

        cursor.execute('''
            INSERT INTO products (ip, login, password, cores, ram, ssd, geo, price)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (ip, login, password, cores, ram, ssd, geo, price))

        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        raise e



def get_products(offset: int, limit: int):
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, cores, ram, ssd, geo, price FROM products LIMIT ? OFFSET ?", (limit, offset))
    products = cursor.fetchall()


    return products
