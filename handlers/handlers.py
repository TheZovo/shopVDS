import asyncio
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram import F
import sqlite3
import logging

import requests

from config import config
from states.states import FSMStates, TopUpStates
from handlers.admin_handlers import admin_router
from handlers.main_handlers import main_router
from keyboards.keyboards import get_payment_check_keyboard, main_keyboard, back_to_main, profile_inline_keyboard, product_buy_keyboard, get_payment_inline_keyboard, create_products_keyboard
from functions.functions import apply_promo_code, check_and_update_payment, get_flag, get_user_balance, update_user_balance, create_payment


router = Router()

router.include_routers(admin_router, main_router)

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "top_up")
async def topup_handler(callback: CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=get_payment_inline_keyboard())
    await callback.answer()

@router.callback_query(F.data == "topup_yoo")
async def topup_yoo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ RUB:")
    await state.set_state(TopUpStates.waiting_for_rub_amount)
    await callback.answer()

@router.message(TopUpStates.waiting_for_rub_amount)
async def process_yoo_amount(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: '{message.text}'")
    
    try:
        if not message.text or message.text.strip() == "":
            logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –≤–≤–æ–¥")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 100.50).")
            return

        amount_str = message.text.strip().replace(',', '.')
        amount_rub = float(amount_str)
        
        if amount_rub < 2:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 2 RUB. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑.")
            return

        payment_data, amount_usd = create_payment(amount_rub, message.from_user.id)
        
        if "confirmation" not in payment_data or "confirmation_url" not in payment_data["confirmation"]:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç YooKassa.")

        payment_url = payment_data["confirmation"]["confirmation_url"]
        payment_id = payment_data["id"]
        
        logger.debug(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ —Å ID: {payment_id}")
        
        await message.answer(
            f"üíµ –°—É–º–º–∞: {amount_rub:.2f} RUB ({amount_usd:.2f} USD)\n\n"
            f"üîó{payment_url}\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
            disable_web_page_preview=True,
            reply_markup=get_payment_check_keyboard(payment_id)
        )
    except ValueError as ve:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã: {ve}")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 100.50).")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=back_to_main()
        )
    finally:
        await state.clear()

@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: CallbackQuery):
    payment_id = callback.data.split("_")[2]
    
    try:
        payment_updated = check_and_update_payment(payment_id)
        
        conn = sqlite3.connect('vds_shop.db')
        cursor = conn.cursor()
        cursor.execute("SELECT status, telegram_id, amount_usd FROM payments WHERE payment_id = ?", (payment_id,))
        payment = cursor.fetchone()
        conn.close()
        
        if not payment:
            await callback.message.edit_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
                reply_markup=back_to_main()
            )
            await callback.answer()
            return

        status, telegram_id, amount_usd = payment
        
        if payment_updated:
            balance = get_user_balance(callback.from_user.id)
            await callback.message.edit_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ {amount_usd:.2f} USD —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} USD",
                reply_markup=back_to_main()
            )
        elif status == "succeeded":
            balance = get_user_balance(callback.from_user.id)
            await callback.message.edit_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ {amount_usd:.2f} USD —É–∂–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ!\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} USD",
                reply_markup=back_to_main()
            )
        elif status == "canceled":
            await callback.message.edit_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
                reply_markup=back_to_main()
            )
        else:
            current_text = callback.message.text
            new_text = f"‚è≥ –ü–ª–∞—Ç–µ–∂ –Ω–∞ {amount_usd:.2f} USD –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (—Å—Ç–∞—Ç—É—Å: {status}).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=get_payment_check_keyboard(payment_id)
                )
            else:
                await callback.answer("–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=back_to_main()
        )
    await callback.answer()


@router.callback_query(F.data == "topup_crypto")
async def topup_crypto(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USD:")
    await state.set_state(TopUpStates.waiting_for_crypto_amount)

@router.message(TopUpStates.waiting_for_crypto_amount)
async def topup_crypto_amount(message: Message, state: FSMContext):
    try:
        amount_usd = float(message.text)
        if amount_usd <= 0:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return
        url = "https://pay.crypt.bot/api/createInvoice"
        headers = {
            "Crypto-Pay-API-Token": config.CRYPTO_API_KEY,
            "Content-Type": "application/json"
        }
        payload = {
            "asset": "USDT",
            "amount": amount_usd,
            "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            "paid_btn_name": "openBot",
            "paid_btn_url": config.RETURN_URL,
            "payload": str(message.from_user.id),
            "allow_anonymous": False
        }
        response = requests.post(url, json=payload, headers=headers)
        data = response.json()

        if data.get('ok'):
            invoice_id = data["result"]["invoice_id"]
            pay_url = data["result"]["pay_url"]

            conn = sqlite3.connect("vds_shop.db")
            cursor = conn.cursor()
            cursor.execute("INSERT INTO crypto_payments (invoice_id, telegram_id, amount, status) VALUES (?, ?, ?, ?)", 
                          (invoice_id, message.from_user.id, amount_usd, "pending"))
            conn.commit()
            conn.close()
            
            await message.answer(f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {pay_url}", 
                               reply_markup=get_payment_check_keyboard(f"crypto_{invoice_id}"))
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
            print(f"–û—à–∏–±–∫–∞ API: {data}")

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
    await state.clear()

@router.callback_query(F.data.startswith("check_crypto_payment_"))
async def check_crypto_payment(callback: CallbackQuery):
    print(f"–ü–æ–ª—É—á–µ–Ω callback_data: {callback.data}")
    invoice_id = callback.data.split("_")[3]
    await callback.message.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
    payment_status = await check_crypto_payment_status(invoice_id)
    
    if payment_status == "paid":
        await callback.message.answer("–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.")
    elif payment_status == "pending":
        await callback.message.answer("–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

async def check_crypto_payment_status(invoice_id: str) -> str:
    url = "https://pay.crypt.bot/api/getInvoices"
    headers = {"Crypto-Pay-API-Token": config.CRYPTO_API_KEY}
    
    try:
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è invoice_id: {invoice_id}")
        response = requests.get(url, headers=headers)
        print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ API: {response.status_code}")
        data = response.json()
        print(f"–û—Ç–≤–µ—Ç API: {data}")
        
        if not data.get("ok"):
            logging.error(f"–û—à–∏–±–∫–∞ API: {data}")
            return "error"
            
        invoices = data.get("result", {}).get("items", [])
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–Ω–≤–æ–π—Å–æ–≤: {len(invoices)}")
        
        for invoice in invoices:
            if str(invoice.get("invoice_id")) == str(invoice_id):
                status = invoice.get("status")
                print(f"–ù–∞–π–¥–µ–Ω –∏–Ω–≤–æ–π—Å —Å —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
                if status == "paid":
                    conn = sqlite3.connect("vds_shop.db")
                    cursor = conn.cursor()
                    cursor.execute("UPDATE crypto_payments SET status = ? WHERE invoice_id = ?", 
                                 ("paid", invoice_id))
                    cursor.execute("SELECT telegram_id, amount FROM crypto_payments WHERE invoice_id = ?", 
                                 (invoice_id,))
                    result = cursor.fetchone()
                    if result:
                        telegram_id, amount = result
                        cursor.execute("UPDATE users SET balance = balance + ? WHERE telegram_id = ?", 
                                     (amount, telegram_id))
                        conn.commit()
                        print(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}")
                    else:
                        logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è invoice_id: {invoice_id}")
                    conn.close()
                return status
        return "pending"
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        return "error"

# –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
async def check_crypto_payments():
    url = "https://pay.crypt.bot/api/getInvoices"
    headers = {"Crypto-Pay-API-Token": config.CRYPTO_API_KEY}
    conn = sqlite3.connect("vds_shop.db")
    cursor = conn.cursor()
    
    try:
        cursor.execute("SELECT invoice_id, telegram_id, amount FROM crypto_payments WHERE status = ?", ("pending",))
        pending_payments = cursor.fetchall()
        
        response = requests.get(url, headers=headers)
        data = response.json()
        
        if not data.get("ok"):
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤: %s", data)
            return
            
        invoices = data.get("result", [])
        
        if not isinstance(invoices, list):
            logging.error("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö invoices: %s", invoices)
            return
            
        for invoice_id, user_id, amount in pending_payments:
            for invoice in invoices:
                if not isinstance(invoice, dict):
                    continue
                if str(invoice.get("invoice_id")) == str(invoice_id) and invoice.get("status") == "paid":
                    cursor.execute("UPDATE crypto_payments SET status = ? WHERE invoice_id = ?", 
                                 ("paid", invoice_id))
                    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", 
                                 (amount, user_id))
                    conn.commit()
                    
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –≤ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: %s", str(e))
    finally:
        conn.close()

        



@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery, state: FSMContext):
    balance = get_user_balance(callback.from_user.id)
    text = f"–í–∞—à ID: {callback.from_user.id}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} USD"
    await callback.message.edit_text(text, reply_markup=profile_inline_keyboard)
    await callback.answer()
    await state.clear()
    


@router.callback_query(F.data == "products_back")
async def products_back(callback: CallbackQuery, state: FSMContext):
    keyboard = create_products_keyboard(page=0)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)
    await callback.answer()
    await state.clear()


@router.callback_query(F.data.startswith("page_"))
async def page_navigation(callback_query: CallbackQuery):
    page = int(callback_query.data.split("_")[1])
    keyboard = create_products_keyboard(page)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)
    await callback_query.answer()


@router.callback_query(F.data.startswith("product_"))
async def product_details(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT ip, login, password, cores, ram, ssd, geo, price FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    if product:
        ip, login, password, cores, ram, ssd, geo, price = product
        product_details = (
            f"–¢–æ–≤–∞—Ä #{product_id}:\n"
            f"–û–ó–£: {ram}GB\n"
            f"SSD: {ssd}GB\n"
            f"–Ø–¥—Ä–∞: {cores}\n"
            f"–ì–µ–æ: {geo}\n"
            f"–¶–µ–Ω–∞: {price} $"
        )
        await callback.message.edit_text(product_details, reply_markup=product_buy_keyboard(product_id))
    await callback.answer()

@router.callback_query(F.data.startswith("buy_"))
async def buy_product(callback_query: CallbackQuery):
    product_id = int(callback_query.data.split("_")[1])
    user_id = callback_query.from_user.id
    
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT ip, login, password, cores, ram, ssd, geo, price FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    
    if not product:
        await callback_query.message.edit_text("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –∫—É–ø–ª–µ–Ω.")
        return
    
    ip, login, password, cores, ram, ssd, geo, price = product
    price = apply_promo_code(user_id, price)
    balance = get_user_balance(user_id)
    
    if balance >= price:
        update_user_balance(user_id, -price)
        cursor.execute(
            "INSERT INTO purchases (telegram_id, ip, login, password, cores, ram, ssd, geo, price) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, ip, login, password, cores, ram, ssd, geo, price)
        )
        cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
        conn.commit()
        flag = get_flag(geo)
        await callback_query.message.edit_text(
            f"‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
            f"üîπ <b>GEO</b> {geo, flag}\n"
            f"üîπ <b>IP:</b> {ip}\n"
            f"üîπ <b>–õ–æ–≥–∏–Ω:</b> {login}\n"
            f"üîπ <b>–ü–∞—Ä–æ–ª—å:</b> {password}\n"
            f"üîπ <b>{cores} –Ø–¥–µ—Ä | {ram}GB RAM | {ssd}GB SSD</b>**\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price}$", reply_markup=back_to_main()
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.**\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä.",
            reply_markup=back_to_main()
        )
    conn.commit()
    await callback_query.answer()

@router.message(FSMStates.waiting_for_promo_code)
async def process_promo(message: Message, state: FSMContext):
    user_id = message.from_user.id
    promo_code = message.text.strip()
    
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT discount, usage_limit FROM promo_codes WHERE code = ?", (promo_code,))
    promo = cursor.fetchone()
    
    if promo:
        discount, usage_limit = promo
        if usage_limit > 0:
            cursor.execute("UPDATE users SET promo_code = ? WHERE telegram_id = ?", (promo_code, user_id))
            conn.commit()
            await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–∫–∏–¥–∫–∞: {discount}%.")
        else:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω.")
    else:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
    await state.clear()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ VDS Market! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard(callback.from_user.id)
    )
    await callback.answer()
    await state.clear()